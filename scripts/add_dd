#!/bin/ksh
#
#====================================================================
#
# script: add_dd   
# Version: 20001106
#
# given an initial date (date0=ccyymmddhh) and a number of days (nd)
# this function returns the final date 
# new_date = date0 + nd
#
# usage: add_dd date0 nd
#
#====================================================================
#
if (( $# != 2 )); then
   echo ' Usage: add_dd date0 n_days '
   exit 1
fi
date0=$1
nd=$2
typeset -Z2  dd
typeset -Z2  mm
typeset -Z4  yy
yy=`echo $date0 | cut -c1-4`
mm=`echo $date0 | cut -c5-6`
dd=`echo $date0 | cut -c7-8`
hh=`echo $date0 | cut -c9-10`

(( new_date = date0 ))

if (( nd > 0 )) ;then
   i=1
   while (( i <= nd  ))
   do
     (( dd = dd + 1 ))

     let leaptest=yy-4*(yy/4) || :
     if [ $leaptest -eq 0 ] ; then
       febl=29
     else
       febl=28
     fi
     set -A nday 31 $febl 31 30 31 30 31 31 30 31 30 31

     let nmon=$mm-1
     if (( dd > ${nday[$nmon]} )) ;then
        dd=1
        ((mm = mm + 1 ))
        if (( mm > 12 )) ;then
           mm=1
           ((yy = yy + 1 ))
        fi
     fi
     new_date=$yy$mm$dd$hh
     (( i = i + 1 ))
   done
fi
#
if (( nd < 0 )) ;then
   i=0
   while (( i > nd )) 
   do
     (( dd = dd - 1 ))

     let leaptest=yy-4*(yy/4) || :
     if [ $leaptest -eq 0 ] ; then
       febl=29
     else
       febl=28
     fi
     set -A nday 31 $febl 31 30 31 30 31 31 30 31 30 31

     if (( dd < 1 )) ;then
        ((mm = mm - 1 ))
        if (( mm < 1 )) ;then
           mm=12
           ((yy = yy - 1 ))
        fi
        let nmon=$mm-1
        dd=${nday[$nmon]}
     fi
     new_date=$yy$mm$dd$hh
     (( i = i - 1 ))
   done
fi
#
echo $new_date
#
#=== end script add_mm =========
#
